from reverseTheArray import revert_array
from time import time
import unittest

class TestRevertArray(unittest.TestCase):

    # 01
    def test_revert_array_with_only_numbers(self):
        input_array = [1, 2, 3, 4, 5]
        expected_result = [5, 4, 3, 2, 1]
        self.assertEqual(revert_array(input_array), expected_result)

    # 02
    def test_revert_array_with_only_strings(self):
        input_array = ['Eduardo', 'Makar', 'Practicum', 'Misha']
        expected_result = ['Misha', 'Practicum', 'Makar', 'Eduardo']
        self.assertEqual(revert_array(input_array), expected_result)
    
    # 03
    def test_revert_array_with_mixed_data_types(self):
        input_array = [1, 'two', 3.0, 'four', 5]
        expected_result = [5, 'four', 3.0, 'two', 1]
        self.assertEqual(revert_array(input_array), expected_result)
    
    # 04
    def test_revert_array_with_empty_array(self):
        input_array = []
        expected_result = []
        self.assertEqual(revert_array(input_array), expected_result)
    
    # 05
    def test_revert_array_with_single_element(self):
        input_array = ['seven']
        expected_result = ['seven']
        self.assertEqual(revert_array(input_array), expected_result)

    # 06
    def test_revert_array_with_none(self):
        input_array = None
        expected_result = '"NoneType" object is not iterable'
        self.assertEqual(revert_array(input_array), expected_result)

    #07
    def test_revert_array_of_nones(self):
        input_array = [None, None, None, None, '!None']
        expected_result = ['!None', None, None, None, None]
        self.assertEqual(revert_array(input_array), expected_result)

    #08
    def test_revert_array_with_nested_lists(self):
        input_array = [['love', 'happiness'], [], [1,2], None, '!None']
        expected_result = ['!None', None, [1,2], [], ['love', 'happiness']]
        self.assertEqual(revert_array(input_array), expected_result)


    #09
    def test_revert_big_array(self):
        big_string
        input_array = list(big_string)[:]
        expected_result = list(big_string[::-1])
        self.assertEqual(revert_array(input_array), expected_result)

    #10 
    def test_with_random_data(self):
        current_time_seconds = list(str(time()))
        input_array = current_time_seconds[:]
        expected_result = list(current_time_seconds[::-1])
        self.assertEqual(revert_array(input_array), expected_result)

    # 11
    def test_revert_array_with_repeated_elements(self):
        input_array = [1, 2, 3, 2, 2]
        expected_result = [2, 2, 3, 2, 1]
        self.assertEqual(revert_array(input_array), expected_result)

    # 12
    def test_revert_array_with_float_numbers(self):
        input_array = [3.14, 2.718, 1.618]
        expected_result = [1.618, 2.718, 3.14]
        self.assertEqual(revert_array(input_array), expected_result)

    # 13
    def test_revert_array_with_mix_of_data_types(self):
        input_array = [1, 'two', True, [4, 5], 'six', False]
        expected_result = [False, 'six', [4, 5], True, 'two', 1]
        self.assertEqual(revert_array(input_array), expected_result)

    # 14
    def test_revert_array_with_special_characters(self):
        input_array = ['!', '@', '#', '$', '%']
        expected_result = ['%', '$', '#', '@', '!']
        self.assertEqual(revert_array(input_array), expected_result)

    # 14
    def test_revert_array_with_palindrome(self):
        input_array = ['s', 'u', 'b', 'i', 'n', 'o', 'o', 'n', 'i', 'b', 'u', 's']
        expected_result = ['s', 'u', 'b', 'i', 'n', 'o', 'o', 'n', 'i', 'b', 'u', 's']
        self.assertEqual(revert_array(input_array), expected_result)

if __name__ == '__main__':
    unittest.main()
